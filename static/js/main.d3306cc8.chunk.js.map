{"version":3,"sources":["Bar.js","Main.js","Info.js","Ledger.js","Coin.js","App.js","serviceWorker.js","index.js"],"names":["Bar","react_default","a","createElement","className","Component","Main","Info","Ledger","Coin","App","src_Bar_0","src_Main_0","src_Info_0","src_Ledger_0","src_Coin_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wVAceA,0LARP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,mBAHMC,cCUHC,0LARP,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,yDAJGE,cCuBJE,0LArBP,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,kCAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,iFACAF,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,uEACAF,EAAAC,EAAAC,cAAA,6EAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,mCAhBDE,cCyBJG,0LAvBP,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,aAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,iBAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,aAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,yBAhBCC,cCUNI,0LARP,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,gCAHOC,cC6BJK,0LAtBX,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACQ,EAAD,OAEJV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACS,EAAD,OAEJX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACU,EAAD,OAEJZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACW,EAAD,OAEJb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACY,EAAD,eAjBEV,cCGEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d3306cc8.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Bar.css';\n\nclass Bar extends Component {\n    render() {\n        return (\n            <div className=\"Bar\">\n                Auto UAV\n            </div>\n        )\n    }\n}\n\nexport default Bar;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Main.css';\n\nclass Main extends Component {\n    render() {\n        return (\n            <div className=\"Main\">\n                <p>Federated Learning Based 5G UAV Edge</p>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Info.css';\n\nclass Info extends Component {\n    render() {\n        return (\n            <div className=\"Info\">\n                <div className=\"Info_Column\">\n                    <div className=\"Title\">\n                        Seamless communication via UAV\n                    </div>\n                    <div className=\"Description\">\n                        <p>First, Providing smooth communication services in high demand areas.</p>\n                        <p>Second, Autonomously explore shaded areas.</p>\n                        <p>Third, Custom caching service based on federated learning.</p>\n                        <p>Fourth, Creation of the optimal ecosystem based on blockchain.</p>\n                    </div>\n                </div>\n                <div className=\"Info_Column\">\n                    <p>Recent Ledger</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Info;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Ledger.css';\n\nclass Ledger extends Component {\n    render() {\n        return (\n            <div className=\"Ledger\">\n                <div className=\"Ledger_Column\">\n                    <div className=\"Title\">\n                        Channel 1\n                    </div>\n                    <div className=\"Description\">\n                        First Ledger\n                    </div>\n                </div>\n                <div className=\"Ledger_Column\">\n                    <div className=\"Title\">\n                        Channel 2\n                    </div>\n                    <div className=\"Description\">\n                        First Ledger\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Ledger;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Coin.css';\n\nclass Coin extends Component {\n    render() {\n        return (\n            <div className=\"Coin\">\n                Coin Issuance History\n            </div>\n        )\n    }\n}\n\nexport default Coin;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Bar from './Bar';\nimport Main from './Main';\nimport Info from './Info';\nimport Ledger from './Ledger';\nimport Coin from './Coin';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n            <div className=\"Layout_Column\">\n                <Bar />\n            </div>\n            <div className=\"Layout_Column\">\n                <Main />\n            </div>\n            <div className=\"Layout_Column\">\n                <Info />\n            </div>\n            <div className=\"Layout_Column\">\n                <Ledger />\n            </div>\n            <div className=\"Layout_Column\">\n                <Coin />\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}